/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package GGram.provider;

import GGram.util.GGramAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GGramItemProviderAdapterFactory extends GGramAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GGramItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link GGram.Man} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ManItemProvider manItemProvider;

	/**
	 * This creates an adapter for a {@link GGram.Man}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createManAdapter() {
		if (manItemProvider == null) {
			manItemProvider = new ManItemProvider(this);
		}

		return manItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link GGram.Woman} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WomanItemProvider womanItemProvider;

	/**
	 * This creates an adapter for a {@link GGram.Woman}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWomanAdapter() {
		if (womanItemProvider == null) {
			womanItemProvider = new WomanItemProvider(this);
		}

		return womanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link GGram.Genogram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenogramItemProvider genogramItemProvider;

	/**
	 * This creates an adapter for a {@link GGram.Genogram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenogramAdapter() {
		if (genogramItemProvider == null) {
			genogramItemProvider = new GenogramItemProvider(this);
		}

		return genogramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link GGram.Marriage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MarriageItemProvider marriageItemProvider;

	/**
	 * This creates an adapter for a {@link GGram.Marriage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMarriageAdapter() {
		if (marriageItemProvider == null) {
			marriageItemProvider = new MarriageItemProvider(this);
		}

		return marriageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link GGram.Cohabitation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CohabitationItemProvider cohabitationItemProvider;

	/**
	 * This creates an adapter for a {@link GGram.Cohabitation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCohabitationAdapter() {
		if (cohabitationItemProvider == null) {
			cohabitationItemProvider = new CohabitationItemProvider(this);
		}

		return cohabitationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link GGram.Engagement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EngagementItemProvider engagementItemProvider;

	/**
	 * This creates an adapter for a {@link GGram.Engagement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEngagementAdapter() {
		if (engagementItemProvider == null) {
			engagementItemProvider = new EngagementItemProvider(this);
		}

		return engagementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link GGram.Divorce} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DivorceItemProvider divorceItemProvider;

	/**
	 * This creates an adapter for a {@link GGram.Divorce}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDivorceAdapter() {
		if (divorceItemProvider == null) {
			divorceItemProvider = new DivorceItemProvider(this);
		}

		return divorceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link GGram.Relationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationshipItemProvider relationshipItemProvider;

	/**
	 * This creates an adapter for a {@link GGram.Relationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationshipAdapter() {
		if (relationshipItemProvider == null) {
			relationshipItemProvider = new RelationshipItemProvider(this);
		}

		return relationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link GGram.Nullity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NullityItemProvider nullityItemProvider;

	/**
	 * This creates an adapter for a {@link GGram.Nullity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNullityAdapter() {
		if (nullityItemProvider == null) {
			nullityItemProvider = new NullityItemProvider(this);
		}

		return nullityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link GGram.LoveAffair} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LoveAffairItemProvider loveAffairItemProvider;

	/**
	 * This creates an adapter for a {@link GGram.LoveAffair}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLoveAffairAdapter() {
		if (loveAffairItemProvider == null) {
			loveAffairItemProvider = new LoveAffairItemProvider(this);
		}

		return loveAffairItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link GGram.CohabitationAndSeparation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CohabitationAndSeparationItemProvider cohabitationAndSeparationItemProvider;

	/**
	 * This creates an adapter for a {@link GGram.CohabitationAndSeparation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCohabitationAndSeparationAdapter() {
		if (cohabitationAndSeparationItemProvider == null) {
			cohabitationAndSeparationItemProvider = new CohabitationAndSeparationItemProvider(this);
		}

		return cohabitationAndSeparationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link GGram.HasAdoptedChild} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HasAdoptedChildItemProvider hasAdoptedChildItemProvider;

	/**
	 * This creates an adapter for a {@link GGram.HasAdoptedChild}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHasAdoptedChildAdapter() {
		if (hasAdoptedChildItemProvider == null) {
			hasAdoptedChildItemProvider = new HasAdoptedChildItemProvider(this);
		}

		return hasAdoptedChildItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link GGram.HasChild} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HasChildItemProvider hasChildItemProvider;

	/**
	 * This creates an adapter for a {@link GGram.HasChild}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHasChildAdapter() {
		if (hasChildItemProvider == null) {
			hasChildItemProvider = new HasChildItemProvider(this);
		}

		return hasChildItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (manItemProvider != null) manItemProvider.dispose();
		if (womanItemProvider != null) womanItemProvider.dispose();
		if (genogramItemProvider != null) genogramItemProvider.dispose();
		if (marriageItemProvider != null) marriageItemProvider.dispose();
		if (cohabitationItemProvider != null) cohabitationItemProvider.dispose();
		if (engagementItemProvider != null) engagementItemProvider.dispose();
		if (divorceItemProvider != null) divorceItemProvider.dispose();
		if (relationshipItemProvider != null) relationshipItemProvider.dispose();
		if (nullityItemProvider != null) nullityItemProvider.dispose();
		if (loveAffairItemProvider != null) loveAffairItemProvider.dispose();
		if (cohabitationAndSeparationItemProvider != null) cohabitationAndSeparationItemProvider.dispose();
		if (hasAdoptedChildItemProvider != null) hasAdoptedChildItemProvider.dispose();
		if (hasChildItemProvider != null) hasChildItemProvider.dispose();
	}

}
